# -*- coding: utf-8 -*-
"""assgn6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uHStcbBNfhQUL0RLuYHe9Qq-ggzkcfZG
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# Q1: Mathematical Function Plot
M = float(input("Enter a value for M: "))
x = np.linspace(-10, 10, 100)
y1 = M * x**2
y2 = M * np.sin(x)

plt.figure(figsize=(8, 6))
plt.plot(x, y1, label=f'y={M}x^2', color='blue', linestyle='--')
plt.plot(x, y2, label=f'y={M}sin(x)', color='red', linestyle='-')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Function Plots")
plt.legend()
plt.grid()
plt.show()

# Q2: Creating a dataset and plotting a bar chart
subjects = ['Math', 'Physics', 'Chemistry', 'Biology', 'English']
scores = [85, 78, 92, 74, 88]
df = pd.DataFrame({'Subjects': subjects, 'Scores': scores})

plt.figure(figsize=(8, 6))
sns.barplot(x='Subjects', y='Scores', data=df, palette='viridis')
for i, score in enumerate(scores):
    plt.text(i, score + 1, str(score), ha='center', fontsize=12, fontweight='bold')
plt.xlabel("Subjects")
plt.ylabel("Scores")
plt.title("Student Scores in Different Subjects")
plt.grid(axis='y', linestyle='--')
plt.show()

# Q3: NumPy dataset and subplots
roll_number = int(input("Enter your roll number: "))
np.random.seed(roll_number)
data = np.random.randn(50)
cumulative_sum = np.cumsum(data)

fig, axes = plt.subplots(2, 2, figsize=(10, 8))
axes[0, 0].plot(cumulative_sum, color='green', marker='o')
axes[0, 0].set_title("Cumulative Sum Line Plot")
axes[0, 0].grid()

axes[1, 1].scatter(range(50), data, color='purple')
axes[1, 1].set_title("Scatter Plot with Random Noise")
axes[1, 1].grid()

plt.tight_layout()
plt.show()

# Q4: Seaborn Visualization on CSV Dataset
data_url = "https://raw.githubusercontent.com/AnjulaMehto/MCA/main/company_sales_data.csv"  # Changed URL
data = pd.read_csv(data_url)

# Print the column names to see the actual column names in the DataFrame
print(data.columns)

plt.figure(figsize=(8, 6))
# Change 'Month' to the actual column name for month in the CSV file, like 'month_number'
sns.lineplot(x=data['month_number'], y=data['total_profit'], marker='o', color='blue')
plt.xlabel("Month")
plt.ylabel("Total Profit")
plt.title("Total Profit Over Months")
plt.grid()
plt.show()

plt.figure(figsize=(8, 6))
# Iterate through the correct column names for sales data
for column in data.columns[1:]:
    sns.lineplot(x=data['month_number'], y=data[column], label=column)
plt.xlabel("Month")
plt.ylabel("Sales Data")
plt.title("Product Sales Over Months")
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(8, 6))
data.drop(columns=['month_number']).plot(kind='bar', stacked=False, figsize=(10, 6))
plt.xlabel("Month")
plt.ylabel("Sales Data")
plt.title("Bar Chart of All Sales Features")
plt.grid()
plt.show()